{"version":3,"file":null,"sources":["../src/Notification.js","../src/Notifications.js","../src/index.js"],"sourcesContent":["export default {\r\n  name: 'notification',\r\n  props: {\r\n    message: String,\r\n    icon: String,\r\n    verticalAlign: {\r\n      type: String,\r\n      default: 'top'\r\n    },\r\n    horizontalAlign: {\r\n      type: String,\r\n      default: 'center'\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'info'\r\n    },\r\n    timeout: {\r\n      type: Number,\r\n      default: 5000\r\n    },\r\n    timestamp:{\r\n      type: Date,\r\n      default: ()=>new Date()\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      elmHeight: 0\r\n    }\r\n  },\r\n  computed: {\r\n    hasIcon () {\r\n      return this.icon && this.icon.length > 0\r\n    },\r\n    alertType () {\r\n      return `alert-${this.type}`\r\n    },\r\n    customPosition () {\r\n      let initialMargin = 20\r\n      let alertHeight = this.elmHeight + 10;\r\n      let sameAlertsCount = this.$notifications.state.filter((alert) => {\r\n        return alert.horizontalAlign === this.horizontalAlign && alert.verticalAlign === this.verticalAlign && alert.timestamp <= this.timestamp\r\n      }).length\r\n      if(this.$notifications.settings.overlap){\r\n        sameAlertsCount = 1\r\n      }\r\n      let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin\r\n      let styles = {}\r\n      if (this.verticalAlign === 'top') {\r\n        styles.top = `${pixels}px`\r\n      } else {\r\n        styles.bottom = `${pixels}px`\r\n      }\r\n      return styles\r\n    }\r\n  },\r\n  methods: {\r\n    close () {\r\n      this.$emit('close')\r\n    }\r\n  },\r\n  mounted () {\r\n    this.elmHeight = this.$el.clientHeight\r\n    if (this.timeout) {\r\n      setTimeout(this.close, this.timeout)\r\n    }\r\n  },\r\n  render(){\r\n    return (\r\n      <div\r\n        data-notify=\"container\"\r\n        class={['col-xs-11 col-sm-4 alert open ',{'alert-with-icon':this.icon}, this.verticalAlign, this.horizontalAlign, this.alertType]}\r\n        role=\"alert\"\r\n        style={this.customPosition}\r\n        data-notify-position=\"top-center\">\r\n        <button\r\n          type=\"button\"\r\n          aria-hidden=\"true\"\r\n          class=\"close col-xs-1\"\r\n          data-notify=\"dismiss\"\r\n          onClick={this.close}>Ã—\r\n        </button>\r\n        {\r\n          this.icon &&  <span data-notify=\"icon\" class={['alert-icon', this.icon]}></span>\r\n        }\r\n        <span data-notify=\"message\">\r\n              {this.message}\r\n            </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import Notification from './Notification.js'\r\nexport default {\r\n    props: {\r\n        transitionName: {\r\n            type: String,\r\n            default: 'list'\r\n        },\r\n        transitionMode: {\r\n            type: String,\r\n            default: 'in-out'\r\n        },\r\n        overlap: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    data () {\r\n        return {\r\n            notifications: this.$notifications.state\r\n        }\r\n    },\r\n    methods: {\r\n        removeNotification (index) {\r\n            this.$notifications.removeNotification(index)\r\n        }\r\n    },\r\n    created(){\r\n        this.$notifications.settings.overlap = this.overlap\r\n    },\r\n    render(){\r\n        const renderedNotifications = this.$notifications.state.map((notification, index) => {\r\n                return <Notification\r\n                    horizontalAlign={notification.horizontalAlign}\r\n                    verticalAlign={notification.verticalAlign}\r\n                    icon={notification.icon}\r\n                    message={notification.message}\r\n                    timeout={notification.timeout}\r\n                    type={notification.type}\r\n                    key={notification} onClose={() => this.removeNotification(index)}/>\r\n            }\r\n        )\r\n        return (\r\n            <div class=\"notifications\">\r\n                <transition-group name={this.transitionName} mode={this.transitionMode}>\r\n                    {renderedNotifications}\r\n                </transition-group>\r\n            </div>\r\n        )\r\n    },\r\n    watch: {\r\n        overlap: function (newVal) {\r\n            this.$notifications.settings.overlap = newVal\r\n        }\r\n    }\r\n}\r\n","import Notifications from './Notifications.js'\r\n\r\nconst NotificationStore = {\r\n    state: [], // here the notifications will be added\r\n    settings: {\r\n        overlap: false\r\n    },\r\n    removeNotification (index) {\r\n        this.state.splice(index, 1)\r\n    },\r\n    notify (notification) {\r\n        notification.timestamp = new Date()\r\n        this.state.push(notification)\r\n    }\r\n}\r\n\r\nvar NotificationsPlugin = {\r\n    install (Vue) {\r\n        Vue.mixin({\r\n            data(){\r\n                return {\r\n                    notificationStore: NotificationStore\r\n                }\r\n            },\r\n            methods: {\r\n                notify(notification) {\r\n                    this.notificationStore.notify(notification);\r\n                }\r\n            }\r\n        })\r\n        Object.defineProperty(Vue.prototype, '$notify', {\r\n            get () {\r\n                return this.$root.notify\r\n            }\r\n        })\r\n        Object.defineProperty(Vue.prototype, '$notifications', {\r\n            get () {\r\n                return this.$root.notificationStore\r\n            }\r\n        })\r\n        Vue.component('Notifications', Notifications)\r\n    }\r\n}\r\n\r\nexport default NotificationsPlugin\r\n"],"names":["String","Number","Date","this","icon","length","type","alertHeight","elmHeight","sameAlertsCount","$notifications","state","filter","alert","horizontalAlign","_this","verticalAlign","timestamp","settings","overlap","pixels","styles","top","bottom","$emit","$el","clientHeight","timeout","close","h","alert-with-icon","alertType","style","customPosition","data-notify","message","Boolean","index","removeNotification","renderedNotifications","map","notification","class","name","transitionName","mode","transitionMode","newVal","NotificationStore","splice","push","Vue","mixin","notificationStore","notify","defineProperty","prototype","$root","component","Notifications"],"mappings":";;;;;sLAAA,aACQ,8BAEKA,YACHA,2BAEEA,eACG,6BAGHA,eACG,qBAGHA,eACG,sBAGHC,eACG,qBAGHC,aACG,iBAAI,IAAIA,0CAKN,uCAKJC,MAAKC,MAAQD,KAAKC,KAAKC,OAAS,uCAGvBF,KAAKG,2CAIjBC,EAAcJ,KAAKK,UAAY,GAC/BC,EAAkBN,KAAKO,eAAeC,MAAMC,OAAO,SAACC,SAC/CA,GAAMC,kBAAoBC,EAAKD,iBAAmBD,EAAMG,gBAAkBD,EAAKC,eAAiBH,EAAMI,WAAaF,EAAKE,YAC9HZ,MACAF,MAAKO,eAAeQ,SAASC,YACZ,MAEhBC,IAAUX,EAAkB,GAAKF,EARjB,GAShBc,WACuB,QAAvBlB,KAAKa,gBACAM,IAASF,SAETG,OAAYH,OAEdC,mCAKFG,MAAM,mCAIRhB,UAAYL,KAAKsB,IAAIC,aACtBvB,KAAKwB,oBACIxB,KAAKyB,MAAOzB,KAAKwB,qDAK5BE,+BACc,iBAEP,+BAEgB,qBAHb,kCAAkCC,kBAAkB3B,KAAKC,MAAOD,KAAKa,cAAeb,KAAKW,gBAAiBX,KAAK4B,WAEvHC,MAAO7B,KAAK8B,iBAEZJ,wBACO,uBACO,qBAEA,iBADN,2BAEG1B,KAAKyB,eAGdzB,KAAKC,MAASyB,iBAAMK,cAAY,eAAe,aAAc/B,KAAKC,WAEpEyB,iBAAMK,cAAY,aACX/B,KAAKgC,6CCnFFnC,eACG,6BAGHA,eACG,wBAGHoC,iBACG,yCAKMjC,KAAKO,eAAeC,6CAInB0B,QACX3B,eAAe4B,mBAAmBD,6BAItC3B,eAAeQ,SAASC,QAAUhB,KAAKgB,qDAGtCoB,EAAwBpC,KAAKO,eAAeC,MAAM6B,IAAI,SAACC,EAAcJ,SAC5DR,6BACcY,EAAa3B,8BACf2B,EAAazB,mBACtByB,EAAarC,aACVqC,EAAaN,gBACbM,EAAad,aAChBc,EAAanC,UACdmC,YAAuB,iBAAM1B,GAAKuB,mBAAmBD,kBAIlER,UAAKa,MAAM,kBACPb,6BAAkBc,KAAMxC,KAAKyC,eAAgBC,KAAM1C,KAAK2C,kBACnDP,sBAMJ,SAAUQ,QACVrC,eAAeQ,SAASC,QAAU4B,KCjD7CC,+BAGW,+BAEOX,QACX1B,MAAMsC,OAAOZ,EAAO,oBAErBI,KACSxB,UAAY,GAAIf,WACxBS,MAAMuC,KAAKT,6BAKXU,KACDC,gDAG2BJ,6BAIhBP,QACEY,kBAAkBC,OAAOb,cAInCc,eAAeJ,EAAIK,UAAW,gCAEtBrD,MAAKsD,MAAMH,iBAGnBC,eAAeJ,EAAIK,UAAW,uCAEtBrD,MAAKsD,MAAMJ,uBAGtBK,UAAU,gBAAiBC"}