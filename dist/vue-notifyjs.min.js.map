{"version":3,"file":null,"sources":["../node_modules/babel-helper-vue-jsx-merge-props/index.js","../src/Notification.js","../src/Notifications.js","../src/index.js"],"sourcesContent":["var nestRE = /^(attrs|props|on|nativeOn|class|style|hook)$/\n\nmodule.exports = function mergeJSXProps (objs) {\n  return objs.reduce(function (a, b) {\n    var aa, bb, key, nestedKey, temp\n    for (key in b) {\n      aa = a[key]\n      bb = b[key]\n      if (aa && nestRE.test(key)) {\n        // normalize class\n        if (key === 'class') {\n          if (typeof aa === 'string') {\n            temp = aa\n            a[key] = aa = {}\n            aa[temp] = true\n          }\n          if (typeof bb === 'string') {\n            temp = bb\n            b[key] = bb = {}\n            bb[temp] = true\n          }\n        }\n        if (key === 'on' || key === 'nativeOn' || key === 'hook') {\n          // merge functions\n          for (nestedKey in bb) {\n            aa[nestedKey] = mergeFn(aa[nestedKey], bb[nestedKey])\n          }\n        } else if (Array.isArray(aa)) {\n          a[key] = aa.concat(bb)\n        } else if (Array.isArray(bb)) {\n          a[key] = [aa].concat(bb)\n        } else {\n          for (nestedKey in bb) {\n            aa[nestedKey] = bb[nestedKey]\n          }\n        }\n      } else {\n        a[key] = b[key]\n      }\n    }\n    return a\n  }, {})\n}\n\nfunction mergeFn (a, b) {\n  return function () {\n    a && a.apply(this, arguments)\n    b && b.apply(this, arguments)\n  }\n}\n","export default {\n    name: 'notification',\n    props: {\n        message: String,\n        title: String,\n        icon: String,\n        verticalAlign: {\n            type: String,\n            default: 'top',\n            validator: (value) => {\n                let acceptedValues = ['top', 'bottom']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        horizontalAlign: {\n            type: String,\n            default: 'right',\n            validator: (value) => {\n                let acceptedValues = ['left', 'center', 'right']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        type: {\n            type: String,\n            default: 'info',\n            validator: (value) => {\n                let acceptedValues = ['info', 'primary', 'danger', 'warning', 'success']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        timeout: {\n            type: Number,\n            default: 5000,\n            validator: (value) => {\n                return value >= 0\n            }\n        },\n        timestamp: {\n            type: Date,\n            default: () => new Date()\n        },\n        component: {\n            type: [Object, Function]\n        },\n        showClose: {\n            type: Boolean,\n            default: true\n        },\n        closeOnClick: {\n            type: Boolean,\n            default: true\n        },\n        clickHandler: Function,\n    },\n    data () {\n        return {\n            elmHeight: 0\n        }\n    },\n    computed: {\n        hasIcon () {\n            return this.icon && this.icon.length > 0\n        },\n        alertType () {\n            return `alert-${this.type}`\n        },\n        customPosition () {\n            let initialMargin = 20\n            let alertHeight = this.elmHeight + 10;\n            let sameAlertsCount = this.$notifications.state.filter((alert) => {\n                return alert.horizontalAlign === this.horizontalAlign && alert.verticalAlign === this.verticalAlign && alert.timestamp <= this.timestamp\n            }).length\n            if (this.$notifications.settings.overlap) {\n                sameAlertsCount = 1\n            }\n            let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin\n            let styles = {}\n            if (this.verticalAlign === 'top') {\n                styles.top = `${pixels}px`\n            } else {\n                styles.bottom = `${pixels}px`\n            }\n            return styles\n        }\n    },\n    methods: {\n        close () {\n\n            this.$emit('close', this.timestamp)\n        },\n        tryClose (evt) {\n            if(this.clickHandler){\n                this.clickHandler(evt, this)\n            }\n            if (this.closeOnClick) {\n                this.close()\n            }\n        }\n    },\n    mounted () {\n        this.elmHeight = this.$el.clientHeight\n        if (this.timeout) {\n            setTimeout(this.close, this.timeout)\n        }\n    },\n    render (h) {\n        let componentName = this.component\n        return (\n            <div onClick={this.tryClose}\n                data-notify=\"container\"\n                class={['alert open ', {'alert-with-icon': this.icon}, this.verticalAlign, this.horizontalAlign, this.alertType]}\n                role=\"alert\"\n                style={this.customPosition}\n                data-notify-position=\"top-center\">\n                {\n                    this.showClose && <button\n                        type=\"button\"\n                        aria-hidden=\"true\"\n                        class=\"close col-xs-1\"\n                        data-notify=\"dismiss\"\n                        onClick={this.close}>Ã—\n                                    </button>\n                }\n                {\n                    this.icon && <span data-notify=\"icon\" class={['alert-icon', this.icon]}></span>\n                }\n                <span data-notify=\"message\">\n                {this.title !== undefined && <span class=\"title\"><b>{this.title}<br/></b></span>}\n                    {this.message !== undefined && this.message}\n                    {this.component !== undefined &&\n                        <this.component></this.component>}\n                </span>\n            </div>\n        )\n    }\n}\n","import Notification from './Notification.js'\nexport default {\n    props: {\n        transitionName: {\n            type: String,\n            default: 'list'\n        },\n        transitionMode: {\n            type: String,\n            default: 'in-out'\n        },\n        overlap: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data () {\n        return {\n            notifications: this.$notifications.state\n        }\n    },\n    methods: {\n        removeNotification (timestamp) {\n            this.$notifications.removeNotification(timestamp)\n        }\n    },\n    created(){\n        this.$notifications.settings.overlap = this.overlap\n    },\n    render(){\n        const renderedNotifications = this.$notifications.state.map((notification, index) => {\n                return <Notification\n                    horizontalAlign={notification.horizontalAlign}\n                    verticalAlign={notification.verticalAlign}\n                    icon={notification.icon}\n                    message={notification.message}\n                    title={notification.title}\n                    timeout={notification.timeout}\n                    type={notification.type}\n                    component={notification.component}\n                    timestamp={notification.timestamp}\n                    closeOnClick={notification.closeOnClick}\n                    clickHandler={notification.onClick}\n                    showClose={notification.showClose}\n                    key={notification.timestamp.getTime()} onClose={this.removeNotification}/>\n            }\n        )\n        return (\n            <div class=\"notifications vue-notifyjs\">\n                <transition-group name={this.transitionName} mode={this.transitionMode}>\n                    {renderedNotifications}\n                </transition-group>\n            </div>\n        )\n    },\n    watch: {\n        overlap: function (newVal) {\n            this.$notifications.settings.overlap = newVal\n        }\n    }\n}\n","import Notifications from './Notifications.js'\n\nconst NotificationStore = {\n    state: [], // here the notifications will be added\n    settings: {\n        overlap: false,\n        verticalAlign: 'top',\n        horizontalAlign: 'right',\n        type: 'info',\n        timeout: 5000,\n        closeOnClick: true,\n        showClose: true\n    },\n    setOptions (options) {\n        this.settings = {...this.settings, ...options}\n    },\n    removeNotification (timestamp) {\n        const indexToDelete = this.state.findIndex(n => n.timestamp === timestamp)\n        if (indexToDelete !== -1) {\n            this.state.splice(indexToDelete, 1)\n        }\n    },\n    addNotification(notification){\n        if (typeof notification === 'string' || notification instanceof String){\n            notification = {message: notification}\n        }\n        notification.timestamp = new Date()\n        notification.timestamp.setMilliseconds(notification.timestamp.getMilliseconds() + this.state.length)\n        notification = {...this.settings, ...notification}\n        this.state.push(notification)\n    },\n    notify (notification) {\n        if (Array.isArray(notification)) {\n            notification.forEach((notificationInstance) => {\n                this.addNotification(notificationInstance)\n            })\n        } else {\n            this.addNotification(notification)\n        }\n\n    }\n}\n\nconst NotificationsPlugin = {\n    install (Vue, options) {\n        Vue.mixin({\n            data(){\n                return {\n                    notificationStore: NotificationStore\n                }\n            },\n            methods: {\n                notify(notification) {\n                    this.notificationStore.notify(notification);\n                }\n            }\n        })\n        Object.defineProperty(Vue.prototype, '$notify', {\n            get () {\n                return this.$root.notify\n            }\n        })\n        Object.defineProperty(Vue.prototype, '$notifications', {\n            get () {\n                return this.$root.notificationStore\n            }\n        })\n        Vue.component('Notifications', Notifications)\n        if(options){\n            NotificationStore.setOptions(options)\n        }\n    }\n}\n\nexport default NotificationsPlugin\n"],"names":["mergeFn","a","b","apply","this","arguments","nestRE","objs","reduce","aa","bb","key","nestedKey","temp","test","Array","isArray","concat","String","value","indexOf","Number","Date","Object","Function","Boolean","icon","length","type","alertHeight","elmHeight","sameAlertsCount","$notifications","state","filter","alert","horizontalAlign","_this","verticalAlign","timestamp","settings","overlap","pixels","styles","top","bottom","$emit","evt","clickHandler","closeOnClick","close","$el","clientHeight","timeout","h","component","alert-with-icon","alertType","style","customPosition","tryClose","showClose","data-notify","undefined","title","class","message","removeNotification","renderedNotifications","map","notification","index","onClick","getTime","name","transitionName","mode","transitionMode","newVal","NotificationStore","options","indexToDelete","findIndex","n","splice","setMilliseconds","getMilliseconds","push","forEach","notificationInstance","addNotification","Vue","mixin","notificationStore","notify","defineProperty","prototype","$root","Notifications","setOptions"],"mappings":"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"}