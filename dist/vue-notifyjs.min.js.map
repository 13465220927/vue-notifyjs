{"version":3,"file":null,"sources":["../src/Notification.js","../src/Notifications.js","../src/index.js"],"sourcesContent":["export default {\n    name: 'notification',\n    props: {\n        message: String,\n        icon: String,\n        verticalAlign: {\n            type: String,\n            default: 'top',\n            validator: (value) => {\n                let acceptedValues = ['top', 'bottom']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        horizontalAlign: {\n            type: String,\n            default: 'center',\n            validator: (value) => {\n                let acceptedValues = ['left', 'center', 'right']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        type: {\n            type: String,\n            default: 'info',\n            validator: (value) => {\n                let acceptedValues = ['info', 'primary', 'danger', 'warning', 'success']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        timeout: {\n            type: Number,\n            default: 5000,\n            validator: (value) => {\n                return value > 0\n            }\n        },\n        timestamp: {\n            type: Date,\n            default: () => new Date()\n        },\n        component: {\n            type: [Object, Function]\n        }\n    },\n    data () {\n        return {\n            elmHeight: 0\n        }\n    },\n    computed: {\n        hasIcon () {\n            return this.icon && this.icon.length > 0\n        },\n        alertType () {\n            return `alert-${this.type}`\n        },\n        customPosition () {\n            let initialMargin = 20\n            let alertHeight = this.elmHeight + 10;\n            let sameAlertsCount = this.$notifications.state.filter((alert) => {\n                return alert.horizontalAlign === this.horizontalAlign && alert.verticalAlign === this.verticalAlign && alert.timestamp <= this.timestamp\n            }).length\n            if (this.$notifications.settings.overlap) {\n                sameAlertsCount = 1\n            }\n            let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin\n            let styles = {}\n            if (this.verticalAlign === 'top') {\n                styles.top = `${pixels}px`\n            } else {\n                styles.bottom = `${pixels}px`\n            }\n            return styles\n        }\n    },\n    methods: {\n        close () {\n            this.$emit('close')\n        }\n    },\n    mounted () {\n        this.elmHeight = this.$el.clientHeight\n        if (this.timeout) {\n            setTimeout(this.close, this.timeout)\n        }\n    },\n    render(h){\n        let componentName = this.component\n        return (\n            <div onClick={this.close}\n                 data-notify=\"container\"\n                 class={['alert open ', {'alert-with-icon': this.icon}, this.verticalAlign, this.horizontalAlign, this.alertType]}\n                 role=\"alert\"\n                 style={this.customPosition}\n                 data-notify-position=\"top-center\">\n                <button\n                    type=\"button\"\n                    aria-hidden=\"true\"\n                    class=\"close col-xs-1\"\n                    data-notify=\"dismiss\"\n                    onClick={this.close}>Ã—\n                </button>\n                {\n                    this.icon && <span data-notify=\"icon\" class={['alert-icon', this.icon]}></span>\n                }\n                <span data-notify=\"message\">\n            {this.message !== undefined && this.message}\n                    {this.component !== undefined &&\n                    <this.component></this.component>}\n        </span>\n            </div>\n        )\n    }\n}\n","import Notification from './Notification.js'\nexport default {\n    props: {\n        transitionName: {\n            type: String,\n            default: 'list'\n        },\n        transitionMode: {\n            type: String,\n            default: 'in-out'\n        },\n        overlap: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data () {\n        return {\n            notifications: this.$notifications.state\n        }\n    },\n    methods: {\n        removeNotification (index) {\n            this.$notifications.removeNotification(index)\n        }\n    },\n    created(){\n        this.$notifications.settings.overlap = this.overlap\n    },\n    render(){\n        const renderedNotifications = this.$notifications.state.map((notification, index) => {\n                return <Notification\n                    horizontalAlign={notification.horizontalAlign}\n                    verticalAlign={notification.verticalAlign}\n                    icon={notification.icon}\n                    message={notification.message}\n                    timeout={notification.timeout}\n                    type={notification.type}\n                    component={notification.component}\n                    timestamp={notification.timestamp}\n                    key={notification} onClose={() => this.removeNotification(index)}/>\n            }\n        )\n        return (\n            <div class=\"notifications\">\n                <transition-group name={this.transitionName} mode={this.transitionMode}>\n                    {renderedNotifications}\n                </transition-group>\n            </div>\n        )\n    },\n    watch: {\n        overlap: function (newVal) {\n            this.$notifications.settings.overlap = newVal\n        }\n    }\n}\n","import Notifications from './Notifications.js'\n\nconst NotificationStore = {\n    state: [], // here the notifications will be added\n    settings: {\n        overlap: false\n    },\n    removeNotification (index) {\n        this.state.splice(index, 1)\n    },\n    addNotification(notification){\n        notification.timestamp = new Date()\n        notification.timestamp.setMilliseconds(notification.timestamp.getMilliseconds() + this.state.length)\n        this.state.push(notification)\n    },\n    notify (notification) {\n        if (Array.isArray(notification)) {\n            notification.forEach((notificationInstance) => {\n                this.addNotification(notificationInstance)\n            })\n        } else {\n            this.addNotification(notification)\n        }\n\n    }\n}\n\nvar NotificationsPlugin = {\n    install (Vue) {\n        Vue.mixin({\n            data(){\n                return {\n                    notificationStore: NotificationStore\n                }\n            },\n            methods: {\n                notify(notification) {\n                    this.notificationStore.notify(notification);\n                }\n            }\n        })\n        Object.defineProperty(Vue.prototype, '$notify', {\n            get () {\n                return this.$root.notify\n            }\n        })\n        Object.defineProperty(Vue.prototype, '$notifications', {\n            get () {\n                return this.$root.notificationStore\n            }\n        })\n        Vue.component('Notifications', Notifications)\n    }\n}\n\nexport default NotificationsPlugin\n"],"names":["String","value","indexOf","Number","Date","Object","Function","this","icon","length","type","alertHeight","elmHeight","sameAlertsCount","$notifications","state","filter","alert","horizontalAlign","_this","verticalAlign","timestamp","settings","overlap","pixels","styles","top","bottom","$emit","$el","clientHeight","timeout","close","h","component","alert-with-icon","alertType","style","customPosition","data-notify","undefined","message","Boolean","index","removeNotification","renderedNotifications","map","notification","class","name","transitionName","mode","transitionMode","newVal","NotificationStore","splice","setMilliseconds","getMilliseconds","push","Array","isArray","forEach","notificationInstance","addNotification","Vue","mixin","notificationStore","notify","defineProperty","prototype","$root","Notifications"],"mappings":";;;;;sLAAA,aACU,8BAEOA,YACHA,2BAEIA,eACG,gBACE,SAACC,UAEkC,KADpB,MAAO,UACPC,QAAQD,2BAI5BD,eACG,mBACE,SAACC,UAEkC,KADpB,OAAQ,SAAU,SAClBC,QAAQD,gBAI5BD,eACG,iBACE,SAACC,UAEkC,KADpB,OAAQ,UAAW,SAAU,UAAW,WACxCC,QAAQD,mBAI5BE,eACG,cACE,SAACF,SACDA,GAAQ,oBAIbG,aACG,iBAAM,IAAIA,yBAGZC,OAAQC,6CAKJ,uCAKJC,MAAKC,MAAQD,KAAKC,KAAKC,OAAS,uCAGvBF,KAAKG,2CAIjBC,EAAcJ,KAAKK,UAAY,GAC/BC,EAAkBN,KAAKO,eAAeC,MAAMC,OAAO,SAACC,SAC7CA,GAAMC,kBAAoBC,EAAKD,iBAAmBD,EAAMG,gBAAkBD,EAAKC,eAAiBH,EAAMI,WAAaF,EAAKE,YAChIZ,MACCF,MAAKO,eAAeQ,SAASC,YACX,MAElBC,IAAUX,EAAkB,GAAKF,EARjB,GAShBc,WACuB,QAAvBlB,KAAKa,gBACEM,IAASF,SAETG,OAAYH,OAEhBC,mCAKFG,MAAM,mCAIVhB,UAAYL,KAAKsB,IAAIC,aACtBvB,KAAKwB,oBACMxB,KAAKyB,MAAOzB,KAAKwB,0BAG7BE,GACiB1B,KAAK2B,gBAErBD,oBAAc1B,KAAKyB,4BACF,iBAEP,+BAEgB,qBAHb,eAAgBG,kBAAmB5B,KAAKC,MAAOD,KAAKa,cAAeb,KAAKW,gBAAiBX,KAAK6B,WAEtGC,MAAO9B,KAAK+B,iBAEbL,wBACS,uBACO,qBAEA,iBADN,2BAEG1B,KAAKyB,eAGdzB,KAAKC,MAAQyB,iBAAMM,cAAY,eAAe,aAAchC,KAAKC,WAErEyB,iBAAMM,cAAY,iBACJC,KAAjBjC,KAAKkC,SAAyBlC,KAAKkC,YACRD,KAAnBjC,KAAK2B,WACND,OAAMC,wDCxGRlC,eACG,6BAGHA,eACG,wBAGH0C,iBACG,yCAKMnC,KAAKO,eAAeC,6CAInB4B,QACX7B,eAAe8B,mBAAmBD,6BAItC7B,eAAeQ,SAASC,QAAUhB,KAAKgB,qDAGtCsB,EAAwBtC,KAAKO,eAAeC,MAAM+B,IAAI,SAACC,EAAcJ,SAC5DV,6BACcc,EAAa7B,8BACf6B,EAAa3B,mBACtB2B,EAAavC,aACVuC,EAAaN,gBACbM,EAAahB,aAChBgB,EAAarC,eACRqC,EAAab,oBACba,EAAa1B,eACnB0B,YAAuB,iBAAM5B,GAAKyB,mBAAmBD,kBAIlEV,UAAKe,MAAM,kBACPf,6BAAkBgB,KAAM1C,KAAK2C,eAAgBC,KAAM5C,KAAK6C,kBACnDP,sBAMJ,SAAUQ,QACVvC,eAAeQ,SAASC,QAAU8B,KCnD7CC,+BAGW,+BAEOX,QACX5B,MAAMwC,OAAOZ,EAAO,6BAEbI,KACC1B,UAAY,GAAIjB,QAChBiB,UAAUmC,gBAAgBT,EAAa1B,UAAUoC,kBAAoBlD,KAAKQ,MAAMN,aACxFM,MAAM2C,KAAKX,oBAEZA,aACAY,OAAMC,QAAQb,KACDc,QAAQ,SAACC,KACbC,gBAAgBD,UAGpBC,gBAAgBhB,6BAOpBiB,KACDC,gDAG2BX,6BAIhBP,QACEmB,kBAAkBC,OAAOpB,cAInCqB,eAAeJ,EAAIK,UAAW,gCAEtB9D,MAAK+D,MAAMH,iBAGnBC,eAAeJ,EAAIK,UAAW,uCAEtB9D,MAAK+D,MAAMJ,uBAGtBhC,UAAU,gBAAiBqC"}